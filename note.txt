http://localhost:8080/MySSH/index.jsp
1.加入Spring
(1)jar
(2)配置web.xml文件
	<context-param>
		<param-name>contextConfigLocation</param-name>
		//类路径下的applicationContext.xml文件
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	配置启动spring-ioc容器的listener
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
(3)加入Spring配置文件
项目右键->新建source folder
命名为conf文件夹
conf下
新建applicationContext.xml的spring配置文件

2.加入Hibernate
(1)加入jar包
(2)在类路径下加入hibernate.cfg.xml文件,在其中配置hibernate的基本属性
 若需要在xml中输入全类名.ctrl+shift+T:搜索该类名,点进去复制
	[1]配置hibernate基本属性
	[2]方言
	[3]格式化显示sql
	[4]生成数据表的策略
	[5]二级缓存相关
如何扫描.hbm文件在spring中配置
	
(3)建立持久化类,对应的.hbm.xml文件,生成数据表
com.zc.entity下
Department类
Employee类
生成对应的hbm.xml文件(!!!配置文件也在该包下)
修改其中主键的<generator class="native"/>生成方式为本地
mysql是自增
Department.hbm.xml中
<class name="com.zc.entity.Department" table="SSH_DEPARTMENT">
    <id name="id" type="java.lang.Integer">
        <column name="ID" />
        <generator class="native" />
    </id>
    <property name="departmentName" type="java.lang.String">
        <column name="DEPARTMENT_NAME" />
    </property>
</class>
Employee.hbm.xml中
//映射单向n-1的关联关系
<many-to-one name="department" class="com.zc.entity.Department">
	<column name="DEPARTMENT_ID"/>
</many-to-one>


(4)Spring整合Hibernate
[1]加入c3p0和Mysql驱动 jar包
[2]编写db.properties文件
	jdbc.user=root
	jdbc.password=1262
	jdbc.driverClass=com.mysql.jdbc.Driver
	jdbc.jdbcUrl=jdbc\:mysql\:///db_ssh
	
	jdbc.initPoolSize=5
	jdbc.maxPoolSize=10
	
[3]在spring中配置:数据源,SessionFactory,声明式事务
applicationContext.xml中
	<!-- 导入资源文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
<!-- 配置 C3P0 数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		//properties文件中的配置jdbc.user
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		
		<property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
	</bean>
<!-- 配置 SessionFactory -->
	//hibernate的SessionFactory
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		//数据源,指向刚刚配置的c3p0数据源 ref="dataSource"
		<property name="dataSource" ref="dataSource"></property>
		//加载hibernate.cfg.xml文件
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		//加载.hbm.xml映射文件.com.zc.entity下的所有hbm.xml
		<property name="mappingLocations" value="classpath:com/zc/entity/*.hbm.xml"></property>
	</bean>	

(5)启动项目,会自动生成数据库表!!!
(6)接着配置spring配置文件applicationContext.xml
<!-- 配置 Spring 的声明式事务 -->
	<!-- 1. 配置 hibernate 的事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- 2. 配置事务属性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="lastNameIsValid" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 3. 配置事务切入点, 再把事务属性和事务切入点关联起来 -->
	<aop:config>	
		//service包下的所有类,所有方法,参数值任意
		<aop:pointcut expression="execution(* com.zc.service.*.*(..))" id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>


3.加入struts2
(1)加入jar包
(2)在web.xml中配置struts2的filter
<!-- 配置struts的拦截器 -->
	<filter>
		<filter-name>struts</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>struts</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
(3)加入struts的配置文件struts.xml	
(3)整合spring
	[1]加入struts2的spring插件的jar包
		struts-spring-plugin.jar
	[2]在spring的配置文件中正常配置struts2的Action类,注意Action的scope为prototype
	新建applicationContext-beans.xml文件,用来配置struts的Action类bean
	<bean id="employeeAction" class="com.zc.actions.EmployeeAction"
		scope="prototype">
		<property name="employeeService" ref="employeeService"></property>	
		<property name="departmentService" ref="departmentService"></property>
	</bean>
	[3]在struts2的配置文件中配置Action时,class属性应该是Action在ioc容器中的id(spring配置文件中的id)!!!!!!


4.完成功能
(1)查询所有员工信息list
[1]index.jsp中<a href="emp-list">List All Employees</a>
[2]新建EmployeeAction.java
public class EmployeeAction extends ActionSupport{
	public String list(){
		return "list";
	}
}
[3]新建EmployeeDao.java
public class EmployeeDao {
	private SessionFactory sessionFactory;
	//查询所有员工
	public List<Employee> getAll(){
	//!!!!hql语法,查询的是类的对象,Employee大写,不是表
		String hql="from Employee";
		//执行hql
		return getSession().createQuery(hql).list();
	}
	//
	public void setSessionFactory(SessionFactory sessionFactory){
		this.sessionFactory=sessionFactory;
	}
	//获取session
	public Session getSession(){
		return this.sessionFactory.getCurrentSession();
	}
	
}

[4]新建EmployeeService.调用dao
public class EmployeeService {
	private EmployeeDao employeeDao;
	public void setEmployeeDao(EmployeeDao employeeDao){
		this.employeeDao=employeeDao;
	}
	//!!由于之前在applicationContext.xml中配置了transactionManager,并作用于get*方法上.
	//这会导致在调用该方法之前开启session,该方法调用之后关闭session.此时会导致Employee中的Department因懒加载查询不出来抛异常
	//参见Employee.hbm.xml配置
	//即页面上<td>${department.departmentName }</td>获取不到
	public List<Employee> getAll(){
		return employeeDao.getAll();
	}
}

[5]EmployeeAction实现RequestAware接口
public class EmployeeAction extends ActionSupport implements RequestAware{
	private EmployeeService employeeService;
	private Map<String, Object> request;
	
	public void setEmployeeService(EmployeeService employeeService){
		this.employeeService=employeeService;
	}
	public String list(){
		//将查询结果放到requst中
		request.put("employees", employeeService.getAll());
		return "list";
	}
	public void setRequest(Map<String, Object> request) {
		this.request=request;
	}
}

[6]Spring中配置bean
创建新的spring配置文件applicationContext-beans.xml
<bean id="employeeDao" class="com.zc.dao.EmployeeDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<bean id="employeeService" class="com.zc.service.EmployeeService">
		<property name="employeeDao" ref="employeeDao"></property>
	</bean>
	
	<bean id="employeeAction" class="com.zc.actions.EmployeeAction"
		scope="prototype">
		<property name="employeeService" ref="employeeService"></property>	
		<property name="departmentService" ref="departmentService"></property>
	</bean>
	
并在web.xml中注册该配置文件
<context-param>
		<param-name>contextConfigLocation</param-name>
		//加*号,代表多个文件
		<param-value>classpath:applicationContext*.xml</param-value>
</context-param>
由于两个配置文件是同一个ioc容器,所以可以互相使用里面的bean

[7]struts.xml中配置结果
 <package name="default" namespace="/" extends="struts-default">
 			//class属性值为在spring中配置的id
        	<action name="emp-*" class="employeeAction" method="{1}">
        		<result name="list">/WEB-INF/views/emp-list.jsp</result>
        	</action>
    </package>

[8]转向结果页面/WEB-INF/views/emp-list.jsp
emp-list.jsp中
//使用ognl标签
<%@ taglib prefix="s" uri="/struts-tags" %>
<s:if test="#request.employees==null||#request.employees.size()==0">
		没有任何员工信息
	</s:if>
	<s:else>
		//迭代器
			<s:iterator value="#request.employees">
				<tr>
					<td>${id }</td>
					<td>${lastName}</td>
					<td>${email }</td>
					<td>${birth }</td>
					<td>${createTime }</td>
					<td>部门</td>
				</tr>
			</s:iterator>
	</s:else>

获取所有员工信息时:若在dao中只查询Employee信息.而且Employee和
Department还是使用的懒加载.页面还需显示员工信息,此时会出现懒加载异常
代理对象不能被初始化org.hibernate.LazyInitializationException:
解决方案,三种
[1]打开懒加载:不推荐
[2]获取Employee时使用 迫切左外链接同时初始化其关联的Department对象
[3]使用OpenSessionInviewFilter


******************************************************
2.删除员工信息
(1)emp-list.jsp中添加删除链接
<td><a href="emp-delete?id=${id}"/>Delete</td>

(2)EmployeeAction中添加删除所需的id属性并提供get set方法
//删除
	public String delete(){
		return "SUCCESS";
	}
(3)EmployeeDao中
public void delete(Integer id){
		String hql="delete from Employee e where e.id=?";
		getSession().createQuery(hql).setInteger(0, id).executeUpdate();
	}
(4)EmployeeService中
public void delete(Integer id){
		employeeDao.delete(id);
	}	
(5)struts.xml中
<result name="success" type="redirect">/emp-list</result>
即删除成功后,重新调用(重定向)emp-list这个action显示所有员工

*************************
2.2使用Ajax方式删除
(1)webroot下new folder->scripts
导入jquery至该目录

(2)emp-list.jsp中发送ajax请求
$(function(){
	//1.点击delete时,弹出确定要删除xx的信息吗.
	//若确定执行删除,不确定,取消
	$(".delete").click(function(){
		var flag=confirm("确定要删除信息吗");
		var lastName=$(this).next(":hidden").val();
		if(flag){
		//使用ajax方式删除
		var delDr=$(this).parent().parent();
		var url=this.href;
		var args={"time":new Date()};
			$.post(url,args,function(data){
				//若data返回值为1,提示删除成功,把当前行删除
				if(data=="1"){
					alert("删除成功");
					delDr.remove();
				}else{
				//若返回值不为1,提示删除失败
					alert("删除失败!");						
				}
				
			});
		}
		//2.取消超链接的默认行为
		return false;
	});
	
});

(3)EmployeeAction.java中处理ajax请求
public void setId(Integer id){
		this.id=id;
	}
	//处理ajax请求
	private InputStream inputStream;
	public InputStream getInputStream(){
		return inputStream;
	}
	public String delete() {
		try {
			employeeService.delete(id);
			inputStream = new ByteArrayInputStream("1".getBytes("UTF-8"));
		} catch (Exception e) {
			e.printStackTrace();
			try {
				inputStream = new ByteArrayInputStream("0".getBytes("UTF-8"));
			} catch (UnsupportedEncodingException e1) {
				e1.printStackTrace();
			}
		}
		return "ajax-success";
	}
(3)struts.xml中
<!-- 使用ajax删除的结果 -->
<result type="stream" name="ajax-success">
    <param name="contentType">text/html</param>
    <param name="inputName">inputStream</param>
</result>	



***********************************************************
3.添加员工
(1)显示表单页面:需要先查询所有的部门信息
(2)使用struts2的ModelDriven和Preparable拦截器
(3)时间是字符串格式,需要转为一个Date类型的对象

(1)index.jsp中添加链接
<a href="emp-input.action">添加员工信息</a>
(2)EmployeeAction.java中
添加
public String input(){
	return "input";
}
在添加新员工页面之前,应查询出所有部门信息
(3)由于DepartmentDao和EmployeeDao中有共用代码,抽取到BaseDao中
private SessionFactory sessionFactory;
public void setSessionFactory(SessionFactory sessionFactory){
	this.sessionFactory=sessionFactory;
}
//获取session
public Session getSession(){
	return this.sessionFactory.getCurrentSession();
}

(4)创建DepartmentService调用DepartmentDao
private DepartmentDao departmentDao;
public void setDepartmentDao(DepartmentDao departmentDao){
	this.departmentDao=departmentDao;
}
//调用dao查询
public List<Department> getAll(){
	return departmentDao.getAll();
}

(5)在EmployeeAction中添加DepartmentService属性
//查询部门信息,跳转到添加员工页面
public String input(){
	request.put("department", departmentService.getAll());
	return "input";
}
(6)struts.xml中配置
<result name="input">/WEB-INF/views/emp-input.jsp</result>
(7)新建emp-input.jsp,显示部门信息,接收新增员工
<s:form action="emp-save.action" method="post">
	<s:textfield name="lastName" label="lastName"></s:textfield>
	<s:textfield name="email" label="邮箱"></s:textfield>
	<s:textfield name="birth" label="生日"></s:textfield>
	<s:select list="#request.department"
		listKey="id" listValue="deaprtmentName"
		name="department.id" label="部门">
	</s:select>
	<s:submit></s:submit>
</s:form>   

(8)在applicationContext-beans.xml中配置bean



	

